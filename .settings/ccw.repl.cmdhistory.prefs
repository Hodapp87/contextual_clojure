cmdhistory=["(+ 1 2)" "(-main)" "(ns contextual.core)" "(-main)" "(+ 1 2)" "(ns contextual.core)" "(-main)" "(ns contextual.core)" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 400 400 100 100)\\n        rot 0.0\\n        tx 100.0\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 400 400 100 100)\\n        rot 0.0\\n        tx 0.0\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 0 0 100 100)\\n        rot 0.0\\n        tx 101.0\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 0 0 100 100)\\n        rot 0.0\\n        tx 110.0\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 0 0 100 100)\\n        rot 0.1\\n        tx 110.0\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [shapefn \#(rect 0 0 100 100)\\n        rot 0.6\\n        tx 110.0\\n        ty 0.0\\n        sx 0.7\\n        sy 0.7]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [side 200\\n        shapefn \#(rect 0 0 side side)\\n        rot 0.6\\n        tx (* 1.1 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [side 200\\n        shapefn \#(rect 0 0 side side)\\n        rot 0.6\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]  \\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(ns contextual.core)" "(-main)" "(defn draw []\\n  (stroke 255)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot 0.6\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (stroke 255)\\n  (fill 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot 0.6\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(ns contextual.core)" "(-main)" "(defn draw []\\n  (stroke 255)\\n  (fill 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (* (/ mouseX 800) 3.14)\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw []\\n  (background 0)\\n  (stroke 255)\\n  (fill 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (* (/ mouseX 800) 3.14)\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx 0.6\\n        sy 0.6]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn setup []\\n  (smooth)\\n  (frame-rate 60)\\n  (set-state\! \:mouse-position (atom [0 0]))\\n  (background 0))" "(ns contextual.core)" "(-main)" "(defn draw []\\n  (background 0)\\n  (stroke 255)\\n  (fill 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        tx (* 1.2 side)\\n        ty 0.0\\n        sx (/ mouseY 1000)\\n        sy sx]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (background 0)\\n  (stroke 255)\\n  (fill 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 1000)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (background 0)\\n  (stroke 255)\\n  (fill 0 0 0 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 200\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 1000)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw []\\n  (background 0)\\n  (stroke 255)\\n  (fill 0 0 0 0)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 1000)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw []\\n  (background 0)\\n  (stroke 0 0 0 0)\\n  (fill 0 127 127 127)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 1000)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw []\\n  (background 0)\\n  (stroke 0 0 0 0)\\n  (fill 0 127 127 127)\\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn recurse [shapefn rot tx ty sx sy]\\n  (defn rec [global_sx global_sy]\\n    (if (or (> global_sx 0.005) (> global_sy 0.005))\\n      (do (shapefn)\\n          (translate tx ty)\\n          (rotate rot)\\n          (scale sx sy)\\n          ; sx2, sy2 keep track of global scale so that we know when to bail out.\\n          (rec (* global_sx sx)\\n               (* global_sy sy)))))\\n  ; We save our current matrix, and let 'rec' apply everything cumulatively.\\n  (push-matrix)\\n  (rec 1.0 1.0)\\n  ; Then return to where we started\:\\n  (pop-matrix))" "(defn draw []\\n  (background 0)\\n  (stroke 0 0 0 0)\\n  (fill 0 127 127 64) \\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 0)\\n  (fill 0 127 127 64) \\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn draw draw_kaleid)" "(defn -main []\\n  (defsketch example\\n    \:title \\"Recursion\\"\\n    \:setup setup\\n    \:draw draw_kaleid\\n    \:mouse-moved mouse-moved\\n    \:size [800 800]))" "(-main)" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 0)\\n  (fill 127 0 0 64) \\n  ;(stroke-weight (random 10))       ;;Set the stroke thickness randomly\\n  ;(fill (random 255))               ;;Set the fill colour to a random grey\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 255)\\n  (fill 127 0 0 64) \\n  (stroke-weight 2)\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 255)\\n  (fill 127 0 0 64) \\n  (stroke-weight 2)\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 255)\\n  (fill 127 0 0 64) \\n  (stroke-weight 2)\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX screen-x) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(-main)" "(defn start []\\n (defsketch example\\n    \:title \\"Recursion\\"\\n    \:setup setup\\n    \:draw draw_kaleid\\n    \:mouse-moved mouse-moved\\n    \:size [800 800]))" "(defn draw_kaleid []\\n  (background 0)\\n  (stroke 0 0 0 255)\\n  (fill 127 0 0 64) \\n  (stroke-weight 2)\\n  (let [[mouseX mouseY] @(state \:mouse-position)\\n        side 400\\n        shapefn \#(rect (/ side -2) (/ side -2) side side)\\n        rot (- (* (/ mouseX 800) 6.28) 3.14)\\n        sx (/ mouseY 900)\\n        sy sx\\n        tx (* sx side)\\n        ty 0.0]\\n    (translate (/ side 2) (/ side 2))\\n    (recurse shapefn rot tx ty sx sy)))" "(defn -main []\\n  start)" "(-main)" "(defn start []\\n (defsketch example\\n    \:title \\"Recursion\\"\\n    \:setup setup\\n    \:draw draw_kaleid\\n    \:mouse-moved mouse-moved\\n    \:size [800 800]))" "(defn -main []\\n  start)" "(-main)" "(ns contextual.core)" "(-main)" "(defn -main []\\n  (start))" "(-main)" "(defn start []\\n  (let [width 800\\n        height 800]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      (stroke 0 0 0 255)\\n      (fill 127 0 0 64) \\n      (stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(defn -main []\\n  (start))" "(-main)" "(defn start []\\n  (let [width 800\\n        height 800]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      (stroke 0 0 0 255)\\n      (fill 255 50 50 64) \\n      (stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 800\\n        height 800]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      (stroke 0 0 0 255)\\n      (fill 255 0 0 32) \\n      (stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      (stroke 0 0 0 255)\\n      (fill 255 0 0 32) \\n      (stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(doc defsketch)" "(doc sketch)" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      (stroke 0 0 0 255)\\n      (fill 255 0 0 32) \\n      (stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 255 0 0 32) \\n      ;(stroke-weight 2)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 255 0 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(defn -main []\\n  (start))" "(defn start []\\n  (let [width 1000\\n        height 1000]\\n    ; One demo I rather like, albeit simple. Set the screen to 800x800 and move\\n    ; the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side (/ width 2)\\n            shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(ns contextual.core)" "(-main)" "(+ 1 2)" "(use contextual.core)" "(ns contextual.core)" "(-main)" "(defn square []\\n  (rect -0.5 0.5 1 1))" "(defn circle []\\n  (ellipse 0 0 0.5 0.5))" "(defn start []\\n  (let [width 500\\n        height 500]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn square []\\n  (rect -0.5 -0.5 1 1))" "(defn start []\\n  (let [width 500\\n        height 500]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    ; r,g,b here are the fill color.\\n    (defn draw_kaleid2 []\\n      (background 0)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (fill 0 255 0 32) \\n        (recurse shapefn rot tx ty sx sy)\\n        (fill 0 0 255 32)\\n        (recurse shapefn rot -tx -ty sx sy)))\\n  (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid2\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(defn start []\\n  (let [width 500\\n        height 500]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    ; r,g,b here are the fill color.\\n    (defn draw_kaleid2 []\\n      (background 0)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (fill 0 255 0 32) \\n        (recurse shapefn rot tx ty sx sy)\\n        (fill 0 0 255 32)\\n        (recurse shapefn rot (- tx) (- ty) sx sy)))\\n  (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid2\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 500\\n        height 500]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    ; r,g,b here are the fill color.\\n    (defn draw_kaleid2 []\\n      (background 0)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (translate (/ width 2) (/ width 2))\\n        (scale (/ width 2) (/ width 2))\\n        (fill 0 255 0 32) \\n        (recurse shapefn rot tx ty sx sy)\\n        (fill 0 0 255 32)\\n        (recurse shapefn rot (- tx) (- ty) sx sy)))\\n  (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid2\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 500\\n        height 500]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    ; r,g,b here are the fill color.\\n    (defn draw_kaleid2 []\\n      (background 0)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (translate (/ width 2) (/ width 2))\\n        (scale (/ width 2) (/ width 2))\\n        (fill 0 255 0 32) \\n        (recurse shapefn rot tx ty sx sy)\\n        (fill 0 0 255 32)\\n        (recurse shapefn (* rot 2) (- tx) (- ty) sx sy)))\\n  (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid2\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)" "(defn start []\\n  (let [width 800\\n        height 800]\\n    ; One demo I rather like, albeit simple. Move the mouse around a bit.\\n    (defn draw_kaleid []\\n      (background 0)\\n      ;(stroke 0 0 0 255)\\n      (fill 0 255 0 32) \\n      ;(stroke-weight 2)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (scale width width)\\n        (recurse shapefn rot tx ty sx sy)))\\n    ; r,g,b here are the fill color.\\n    (defn draw_kaleid2 []\\n      (background 0)\\n      (no-stroke)\\n      (let [[mouseX mouseY] @(state \:mouse-position)\\n            side 1\\n            ;shapefn \#(rect (/ side -2) (/ side -2) side side)\\n            shapefn square\\n            rot (- (* (/ mouseX width) 6.28) 3.14)\\n            sx (/ mouseY (* 1.05 height))\\n            sy sx\\n            tx (* sx side)\\n            ty 0.0]\\n        (translate (/ side 2) (/ side 2))\\n        (translate (/ width 2) (/ width 2))\\n        (scale (/ width 2) (/ width 2))\\n        (fill 0 255 0 32) \\n        (recurse shapefn rot tx ty sx sy)\\n        (fill 0 0 255 32)\\n        (recurse shapefn (* rot 2) (- tx) (- ty) sx sy)))\\n  (defsketch example\\n      \:title \\"Recursion\\"\\n      \:renderer \:opengl\\n      \:setup setup\\n      \:draw draw_kaleid2\\n      \:mouse-moved mouse-moved\\n      \:size [width height])))" "(-main)"]
eclipse.preferences.version=1
